<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Auditoría - Guatemala</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }

        .header p {
            text-align: center;
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 5px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            gap: 5px;
        }

        .tab-button {
            flex: 1;
            min-width: 120px;
            background: transparent;
            border: none;
            padding: 15px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 14px;
        }

        .tab-button:hover {
            background: rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .tab-button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(103, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(103, 126, 234, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .btn-danger {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }

        .btn-warning {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: #212529;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .card {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .inventory-item {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
        }

        .inventory-item h4 {
            color: #495057;
            margin-bottom: 10px;
        }

        .inventory-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .stat {
            text-align: center;
            padding: 10px;
            background: rgba(103, 126, 234, 0.1);
            border-radius: 6px;
        }

        .stat strong {
            display: block;
            font-size: 1.2em;
            color: #667eea;
        }

        .file-upload {
            border: 2px dashed #667eea;
            border-radius: 12px;
            padding: 40px 20px;
            text-align: center;
            transition: all 0.3s ease;
            background: rgba(103, 126, 234, 0.05);
            cursor: pointer;
        }

        .file-upload:hover {
            border-color: #764ba2;
            background: rgba(103, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .file-upload.dragover {
            border-color: #28a745;
            background: rgba(40, 167, 69, 0.1);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            width: 0%;
            transition: width 0.3s ease;
        }

        .user-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .user-item {
            background: rgba(248, 249, 250, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-left: 4px solid #28a745;
        }

        .user-info {
            flex: 1;
        }

        .user-actions {
            display: flex;
            gap: 5px;
        }

        .email-composer {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }

        .alert {
            padding: 12px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }

        .alert-success {
            background: rgba(40, 167, 69, 0.1);
            border-color: #28a745;
            color: #155724;
        }

        .alert-error {
            background: rgba(220, 53, 69, 0.1);
            border-color: #dc3545;
            color: #721c24;
        }

        .alert-info {
            background: rgba(23, 162, 184, 0.1);
            border-color: #17a2b8;
            color: #0c5460;
        }

        .login-form {
            max-width: 400px;
            margin: 100px auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h2 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .nav-tabs {
                flex-direction: column;
            }
            
            .tab-button {
                min-width: auto;
            }
            
            .grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div id="loginScreen" class="login-form">
        <div class="logo">
            <h2>🇬🇹 AuditPro</h2>
            <p>Sistema de Auditoría - Guatemala</p>
        </div>
        <form id="loginForm">
            <div class="form-group">
                <label>Correo Electrónico</label>
                <input type="email" id="loginEmail" required>
            </div>
            <div class="form-group">
                <label>Contraseña</label>
                <input type="password" id="loginPassword" required>
            </div>
            <div class="form-group">
                <label>Tipo de Usuario</label>
                <select id="userType" required>
                    <option value="">Seleccionar...</option>
                    <option value="admin">Administrador</option>
                    <option value="auditor">Auditor</option>
                    <option value="client">Cliente</option>
                    <option value="developer">Desarrollador</option>
                </select>
            </div>
            <button type="submit" class="btn" style="width: 100%;">Iniciar Sesión</button>
        </form>
    </div>

    <div id="mainApp" class="hidden">
        <div class="container">
            <div class="header">
                <h1>🇬🇹 Sistema de Auditoría</h1>
                <p>Plataforma Integral de Auditoría para Empresas Guatemaltecas</p>
                <div style="text-align: right; margin-top: 15px;">
                    <span id="currentUser" style="margin-right: 20px; font-weight: bold;"></span>
                    <button class="btn btn-danger" onclick="logout()">Cerrar Sesión</button>
                </div>
            </div>

            <div class="nav-tabs" id="navTabs">
                <button class="tab-button active" onclick="switchTab('inventarios')">📦 Inventarios</button>
                <button class="tab-button" onclick="switchTab('usuarios')">👥 Usuarios</button>
                <button class="tab-button" onclick="switchTab('archivos')">📁 Archivos</button>
                <button class="tab-button" onclick="switchTab('correos')">📧 Correos</button>
                <button class="tab-button" onclick="switchTab('reportes')">📊 Reportes</button>
                <button class="tab-button" onclick="switchTab('perfil')">👤 Perfil</button>
            </div>

            <!-- Inventarios Tab -->
            <div id="inventarios" class="tab-content active">
                <h2>📦 Gestión de Inventarios</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Agregar Producto al Inventario</h3>
                        <form id="inventoryForm">
                            <div class="form-group">
                                <label>Código del Producto</label>
                                <input type="text" id="productCode" required>
                            </div>
                            <div class="form-group">
                                <label>Nombre del Producto</label>
                                <input type="text" id="productName" required>
                            </div>
                            <div class="form-group">
                                <label>Cantidad</label>
                                <input type="number" id="productQuantity" required>
                            </div>
                            <div class="form-group">
                                <label>Costo Unitario (Q.)</label>
                                <input type="number" step="0.01" id="unitCost" required>
                            </div>
                            <div class="form-group">
                                <label>Precio de Venta (Q.)</label>
                                <input type="number" step="0.01" id="salePrice" required>
                            </div>
                            <div class="form-group">
                                <label>Valor de Mercado (Q.)</label>
                                <input type="number" step="0.01" id="marketValue" required>
                            </div>
                            <button type="submit" class="btn">Agregar Producto</button>
                        </form>
                    </div>

                    <div class="card">
                        <h3>Resumen de Inventario</h3>
                        <div class="inventory-stats">
                            <div class="stat">
                                <strong id="totalProducts">0</strong>
                                <span>Productos</span>
                            </div>
                            <div class="stat">
                                <strong id="totalValue">Q. 0.00</strong>
                                <span>Valor Total</span>
                            </div>
                            <div class="stat">
                                <strong id="totalVNR">Q. 0.00</strong>
                                <span>VNR Total</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>Lista de Productos</h3>
                    <div id="inventoryList"></div>
                </div>
            </div>

            <!-- Usuarios Tab -->
            <div id="usuarios" class="tab-content">
                <h2>👥 Gestión de Usuarios</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Crear Nuevo Usuario</h3>
                        <form id="userForm">
                            <div class="form-group">
                                <label>Nombre Completo</label>
                                <input type="text" id="userName" required>
                            </div>
                            <div class="form-group">
                                <label>Correo Electrónico</label>
                                <input type="email" id="userEmail" required>
                            </div>
                            <div class="form-group">
                                <label>Número de Teléfono</label>
                                <input type="tel" id="userPhone" required>
                            </div>
                            <div class="form-group">
                                <label>Empresa</label>
                                <input type="text" id="userCompany" required>
                            </div>
                            <div class="form-group">
                                <label>Puesto</label>
                                <input type="text" id="userPosition" required>
                            </div>
                            <div class="form-group">
                                <label>Tipo de Usuario</label>
                                <select id="userRole" required>
                                    <option value="">Seleccionar...</option>
                                    <option value="admin">Administrador</option>
                                    <option value="auditor">Auditor</option>
                                    <option value="client">Cliente</option>
                                </select>
                            </div>
                            <button type="submit" class="btn">Crear Usuario</button>
                        </form>
                    </div>

                    <div class="card">
                        <h3>Usuarios Registrados</h3>
                        <div class="user-list" id="usersList"></div>
                    </div>
                </div>
            </div>

            <!-- Archivos Tab -->
            <div id="archivos" class="tab-content">
                <h2>📁 Gestión de Archivos</h2>
                
                <div class="card">
                    <h3>Subir Archivos</h3>
                    <div class="file-upload" id="fileUploadZone">
                        <div>
                            <h4>📁 Arrastra archivos aquí o haz clic para seleccionar</h4>
                            <p>Formatos soportados: .xlsx, .pdf, .png, .docx (máx. 200MB)</p>
                        </div>
                        <input type="file" id="fileInput" multiple accept=".xlsx,.pdf,.png,.docx" style="display: none;">
                    </div>
                    <div id="uploadProgress" class="hidden">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill"></div>
                        </div>
                        <p id="uploadStatus"></p>
                    </div>
                </div>

                <div class="card">
                    <h3>Archivos Subidos</h3>
                    <div id="filesList"></div>
                </div>
            </div>

            <!-- Correos Tab -->
            <div id="correos" class="tab-content">
                <h2>📧 Centro de Correos</h2>
                
                <div class="email-composer">
                    <h3>Enviar Correo</h3>
                    <form id="emailForm">
                        <div class="grid">
                            <div class="form-group">
                                <label>Para</label>
                                <input type="email" id="emailTo" required>
                            </div>
                            <div class="form-group">
                                <label>Asunto</label>
                                <input type="text" id="emailSubject" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Mensaje</label>
                            <textarea id="emailMessage" rows="8" required></textarea>
                        </div>
                        <button type="submit" class="btn">📧 Enviar Correo</button>
                    </form>
                </div>

                <div class="card">
                    <h3>Plantillas de Correo</h3>
                    <button class="btn btn-warning" onclick="loadEmailTemplate('audit')">Solicitud de Auditoría</button>
                    <button class="btn btn-warning" onclick="loadEmailTemplate('report')">Reporte de Inventario</button>
                    <button class="btn btn-warning" onclick="loadEmailTemplate('reminder')">Recordatorio</button>
                </div>
            </div>

            <!-- Reportes Tab -->
            <div id="reportes" class="tab-content">
                <h2>📊 Reportes y Análisis</h2>
                
                <div class="grid">
                    <div class="card">
                        <h3>Generar Reportes</h3>
                        <button class="btn btn-success" onclick="generateReport('inventory')">📋 Reporte de Inventario</button>
                        <button class="btn btn-success" onclick="generateReport('vnr')">💰 Análisis VNR</button>
                        <button class="btn btn-success" onclick="generateReport('valuation')">📈 Valuación de Inventarios</button>
                        <button class="btn btn-success" onclick="generateReport('users')">👥 Reporte de Usuarios</button>
                    </div>

                    <div class="card">
                        <h3>Estadísticas Generales</h3>
                        <div class="inventory-stats">
                            <div class="stat">
                                <strong id="statsProducts">0</strong>
                                <span>Total Productos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsUsers">0</strong>
                                <span>Usuarios Activos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsFiles">0</strong>
                                <span>Archivos</span>
                            </div>
                            <div class="stat">
                                <strong id="statsEmails">0</strong>
                                <span>Correos Enviados</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Perfil Tab -->
            <div id="perfil" class="tab-content">
                <h2>👤 Perfil de Usuario</h2>
                
                <div class="card">
                    <h3>Información Personal</h3>
                    <form id="profileForm">
                        <div class="grid">
                            <div class="form-group">
                                <label>Nombre Completo</label>
                                <input type="text" id="profileName" required>
                            </div>
                            <div class="form-group">
                                <label>Correo Electrónico</label>
                                <input type="email" id="profileEmail" required>
                            </div>
                        </div>
                        <div class="grid">
                            <div class="form-group">
                                <label>Teléfono</label>
                                <input type="tel" id="profilePhone" required>
                            </div>
                            <div class="form-group">
                                <label>Empresa</label>
                                <input type="text" id="profileCompany" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Puesto</label>
                            <input type="text" id="profilePosition" required>
                        </div>
                        <button type="submit" class="btn">💾 Actualizar Perfil</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Estado global de la aplicación
        let appState = {
            currentUser: null,
            inventory: [],
            users: [],
            files: [],
            emails: []
        };

        // Inicialización de la aplicación
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            try {
                // Configurar event listeners
                const loginForm = document.getElementById('loginForm');
                const inventoryForm = document.getElementById('inventoryForm');
                const userForm = document.getElementById('userForm');
                const emailForm = document.getElementById('emailForm');
                const profileForm = document.getElementById('profileForm');

                if (loginForm) loginForm.addEventListener('submit', handleLogin);
                if (inventoryForm) inventoryForm.addEventListener('submit', handleInventorySubmit);
                if (userForm) userForm.addEventListener('submit', handleUserSubmit);
                if (emailForm) emailForm.addEventListener('submit', handleEmailSubmit);
                if (profileForm) profileForm.addEventListener('submit', handleProfileSubmit);
                
                // Configurar subida de archivos
                setupFileUpload();
                
                // Cargar datos iniciales de ejemplo
                loadSampleData();
                
                console.log('Aplicación inicializada correctamente');
            } catch (error) {
                console.error('Error al inicializar la aplicación:', error);
            }
        }

        function handleLogin(e) {
            e.preventDefault();
            try {
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                const userType = document.getElementById('userType').value;

                if (email && password && userType) {
                    appState.currentUser = {
                        email: email,
                        type: userType,
                        name: getUserNameFromEmail(email)
                    };

                    document.getElementById('loginScreen').classList.add('hidden');
                    document.getElementById('mainApp').classList.remove('hidden');
                    document.getElementById('currentUser').textContent = `${appState.currentUser.name} (${userType})`;
                    
                    setupUserInterface();
                    showAlert('success', '¡Bienvenido al Sistema de Auditoría!');
                }
            } catch (error) {
                console.error('Error en el login:', error);
                showAlert('error', 'Error al iniciar sesión');
            }
        }

        function getUserNameFromEmail(email) {
            return email.split('@')[0].replace(/[._]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        function logout() {
            try {
                appState.currentUser = null;
                document.getElementById('loginScreen').classList.remove('hidden');
                document.getElementById('mainApp').classList.add('hidden');
                document.getElementById('loginForm').reset();
            } catch (error) {
                console.error('Error al cerrar sesión:', error);
            }
        }

        function setupUserInterface() {
            try {
                const userType = appState.currentUser.type;
                
                if (userType === 'client') {
                    hideTabsExcept(['inventarios', 'archivos', 'perfil']);
                } else if (userType === 'auditor') {
                    hideTabsExcept(['inventarios', 'usuarios', 'archivos', 'correos', 'reportes', 'perfil']);
                }
            } catch (error) {
                console.error('Error configurando interfaz:', error);
            }
        }

        function hideTabsExcept(allowedTabs) {
            try {
                const tabs = document.querySelectorAll('.tab-button');
                tabs.forEach(tab => {
                    const onClickAttr = tab.getAttribute('onclick');
                    if (onClickAttr) {
                        const match = onClickAttr.match(/switchTab\('(.+)'\)/);
                        if (match) {
                            const tabName = match[1];
                            if (!allowedTabs.includes(tabName)) {
                                tab.style.display = 'none';
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error ocultando pestañas:', error);
            }
        }

        function switchTab(tabName) {
            try {
                // Ocultar todas las pestañas
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // Remover clase active de botones
                document.querySelectorAll('.tab-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // Mostrar pestaña seleccionada
                const targetTab = document.getElementById(tabName);
                if (targetTab) {
                    targetTab.classList.add('active');
                }
                
                // Activar botón correspondiente
                const activeButton = document.querySelector(`[onclick="switchTab('${tabName}')"]`);
                if (activeButton) {
                    activeButton.classList.add('active');
                }
                
                // Actualizar contenido específico de la pestaña
                if (tabName === 'reportes') {
                    updateStatistics();
                }
            } catch (error) {
                console.error('Error cambiando pestaña:', error);
            }
        }

        // GESTIÓN DE INVENTARIOS
        function handleInventorySubmit(e) {
            e.preventDefault();
            try {
                const product = {
                    id: Date.now(),
                    code: document.getElementById('productCode').value,
                    name: document.getElementById('productName').value,
                    quantity: parseInt(document.getElementById('productQuantity').value),
                    unitCost: parseFloat(document.getElementById('unitCost').value),
                    salePrice: parseFloat(document.getElementById('salePrice').value),
                    marketValue: parseFloat(document.getElementById('marketValue').value),
                    date: new Date().toLocaleDateString()
                };

                // Calcular VNR (Valor Neto de Realización)
                product.vnr = Math.min(product.salePrice, product.marketValue) * product.quantity;
                product.totalCost = product.unitCost * product.quantity;
                product.totalValue = product.salePrice * product.quantity;

                appState.inventory.push(product);
                updateInventoryDisplay();
                document.getElementById('inventoryForm').reset();
                showAlert('success', 'Producto agregado exitosamente al inventario');
            } catch (error) {
                console.error('Error agregando producto:', error);
                showAlert('error', 'Error al agregar el producto');
            }
        }

        function updateInventoryDisplay() {
            try {
                const inventoryList = document.getElementById('inventoryList');
                if (!inventoryList) return;

                let html = '';

                appState.inventory.forEach(product => {
                    html += `
                        <div class="inventory-item">
                            <h4>${product.name} (${product.code})</h4>
                            <div class="inventory-stats">
                                <div class="stat">
                                    <strong>${product.quantity}</strong>
                                    <span>Cantidad</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.unitCost.toFixed(2)}</strong>
                                    <span>Costo Unitario</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.totalCost.toFixed(2)}</strong>
                                    <span>Costo Total</span>
                                </div>
                                <div class="stat">
                                    <strong>Q. ${product.vnr.toFixed(2)}</strong>
                                    <span>VNR</span>
                                </div>
                            </div>
                            <div style="margin-top: 10px;">
                                <button class="btn btn-warning" onclick="editProduct(${product.id})">Editar</button>
                                <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                inventoryList.innerHTML = html || '<p>No hay productos en el inventario</p>';
                updateInventorySummary();
            } catch (error) {
                console.error('Error actualizando inventario:', error);
            }
        }

        function updateInventorySummary() {
            try {
                const totalProducts = appState.inventory.length;
                const totalValue = appState.inventory.reduce((sum, product) => sum + product.totalValue, 0);
                const totalVNR = appState.inventory.reduce((sum, product) => sum + product.vnr, 0);

                const totalProductsEl = document.getElementById('totalProducts');
                const totalValueEl = document.getElementById('totalValue');
                const totalVNREl = document.getElementById('totalVNR');

                if (totalProductsEl) totalProductsEl.textContent = totalProducts;
                if (totalValueEl) totalValueEl.textContent = `Q. ${totalValue.toFixed(2)}`;
                if (totalVNREl) totalVNREl.textContent = `Q. ${totalVNR.toFixed(2)}`;
            } catch (error) {
                console.error('Error actualizando resumen:', error);
            }
        }

        function editProduct(id) {
            try {
                const product = appState.inventory.find(p => p.id === id);
                if (product) {
                    document.getElementById('productCode').value = product.code;
                    document.getElementById('productName').value = product.name;
                    document.getElementById('productQuantity').value = product.quantity;
                    document.getElementById('unitCost').value = product.unitCost;
                    document.getElementById('salePrice').value = product.salePrice;
                    document.getElementById('marketValue').value = product.marketValue;
                    
                    deleteProduct(id);
                    showAlert('info', 'Producto cargado para edición');
                }
            } catch (error) {
                console.error('Error editando producto:', error);
            }
        }

        function deleteProduct(id) {
            try {
                appState.inventory = appState.inventory.filter(p => p.id !== id);
                updateInventoryDisplay();
                showAlert('success', 'Producto eliminado del inventario');
            } catch (error) {
                console.error('Error eliminando producto:', error);
            }
        }

        // GESTIÓN DE USUARIOS
        function handleUserSubmit(e) {
            e.preventDefault();
            try {
                const user = {
                    id: Date.now(),
                    name: document.getElementById('userName').value,
                    email: document.getElementById('userEmail').value,
                    phone: document.getElementById('userPhone').value,
                    company: document.getElementById('userCompany').value,
                    position: document.getElementById('userPosition').value,
                    role: document.getElementById('userRole').value,
                    createdDate: new Date().toLocaleDateString()
                };

                appState.users.push(user);
                updateUsersDisplay();
                document.getElementById('userForm').reset();
                showAlert('success', 'Usuario creado exitosamente');
            } catch (error) {
                console.error('Error creando usuario:', error);
                showAlert('error', 'Error al crear usuario');
            }
        }

        function updateUsersDisplay() {
            try {
                const usersList = document.getElementById('usersList');
                if (!usersList) return;

                let html = '';

                appState.users.forEach(user => {
                    html += `
                        <div class="user-item">
                            <div class="user-info">
                                <h4>${user.name}</h4>
                                <p><strong>Email:</strong> ${user.email}</p>
                                <p><strong>Empresa:</strong> ${user.company}</p>
                                <p><strong>Puesto:</strong> ${user.position}</p>
                                <p><strong>Rol:</strong> ${getRoleDisplayName(user.role)}</p>
                                <p><strong>Fecha de creación:</strong> ${user.createdDate}</p>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-warning" onclick="editUser(${user.id})">Editar</button>
                                <button class="btn btn-danger" onclick="deleteUser(${user.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                usersList.innerHTML = html || '<p>No hay usuarios registrados</p>';
            } catch (error) {
                console.error('Error actualizando usuarios:', error);
            }
        }

        function getRoleDisplayName(role) {
            const roleNames = {
                'admin': 'Administrador',
                'auditor': 'Auditor',
                'client': 'Cliente'
            };
            return roleNames[role] || role;
        }

        function editUser(id) {
            try {
                const user = appState.users.find(u => u.id === id);
                if (user) {
                    document.getElementById('userName').value = user.name;
                    document.getElementById('userEmail').value = user.email;
                    document.getElementById('userPhone').value = user.phone;
                    document.getElementById('userCompany').value = user.company;
                    document.getElementById('userPosition').value = user.position;
                    document.getElementById('userRole').value = user.role;
                    
                    deleteUser(id);
                    showAlert('info', 'Usuario cargado para edición');
                }
            } catch (error) {
                console.error('Error editando usuario:', error);
            }
        }

        function deleteUser(id) {
            try {
                appState.users = appState.users.filter(u => u.id !== id);
                updateUsersDisplay();
                showAlert('success', 'Usuario eliminado');
            } catch (error) {
                console.error('Error eliminando usuario:', error);
            }
        }

        // GESTIÓN DE ARCHIVOS
        function setupFileUpload() {
            try {
                const fileUploadZone = document.getElementById('fileUploadZone');
                const fileInput = document.getElementById('fileInput');

                if (fileUploadZone && fileInput) {
                    fileUploadZone.addEventListener('click', () => fileInput.click());
                    fileUploadZone.addEventListener('dragover', handleDragOver);
                    fileUploadZone.addEventListener('dragleave', handleDragLeave);
                    fileUploadZone.addEventListener('drop', handleFileDrop);
                    fileInput.addEventListener('change', handleFileSelect);
                }
            } catch (error) {
                console.error('Error configurando subida de archivos:', error);
            }
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
        }

        function handleFileDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            processFiles(files);
        }

        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            processFiles(files);
        }

        function processFiles(files) {
            try {
                const validExtensions = ['.xlsx', '.pdf', '.png', '.docx'];
                const maxSize = 200 * 1024 * 1024; // 200MB

                files.forEach(file => {
                    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
                    
                    if (!validExtensions.includes(fileExtension)) {
                        showAlert('error', `Formato no soportado: ${file.name}`);
                        return;
                    }

                    if (file.size > maxSize) {
                        showAlert('error', `Archivo muy grande: ${file.name} (máx. 200MB)`);
                        return;
                    }

                    uploadFile(file);
                });
            } catch (error) {
                console.error('Error procesando archivos:', error);
            }
        }

        function uploadFile(file) {
            try {
                const uploadProgress = document.getElementById('uploadProgress');
                const progressFill = document.getElementById('progressFill');
                const uploadStatus = document.getElementById('uploadStatus');

                if (uploadProgress) uploadProgress.classList.remove('hidden');
                if (uploadStatus) uploadStatus.textContent = `Subiendo: ${file.name}`;

                // Simulación de carga de archivo
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                        
                        // Guardar archivo en el estado
                        const fileObj = {
                            id: Date.now(),
                            name: file.name,
                            size: file.size,
                            type: file.type,
                            uploadDate: new Date().toLocaleDateString(),
                            uploader: appState.currentUser ? appState.currentUser.name : 'Usuario'
                        };
                        
                        appState.files.push(fileObj);
                        updateFilesDisplay();
                        
                        setTimeout(() => {
                            if (uploadProgress) uploadProgress.classList.add('hidden');
                            showAlert('success', `Archivo subido exitosamente: ${file.name}`);
                        }, 500);
                    }
                    
                    if (progressFill) progressFill.style.width = `${progress}%`;
                    if (uploadStatus) uploadStatus.textContent = `Subiendo: ${file.name} (${Math.round(progress)}%)`;
                }, 200);
            } catch (error) {
                console.error('Error subiendo archivo:', error);
            }
        }

        function updateFilesDisplay() {
            try {
                const filesList = document.getElementById('filesList');
                if (!filesList) return;

                let html = '';

                appState.files.forEach(file => {
                    const fileSizeKB = (file.size / 1024).toFixed(2);
                    html += `
                        <div class="user-item">
                            <div class="user-info">
                                <h4>📄 ${file.name}</h4>
                                <p><strong>Tamaño:</strong> ${fileSizeKB} KB</p>
                                <p><strong>Subido por:</strong> ${file.uploader}</p>
                                <p><strong>Fecha:</strong> ${file.uploadDate}</p>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-success" onclick="downloadFile(${file.id})">Descargar</button>
                                <button class="btn btn-danger" onclick="deleteFile(${file.id})">Eliminar</button>
                            </div>
                        </div>
                    `;
                });

                filesList.innerHTML = html || '<p>No hay archivos subidos</p>';
            } catch (error) {
                console.error('Error actualizando archivos:', error);
            }
        }

        function downloadFile(id) {
            try {
                const file = appState.files.find(f => f.id === id);
                if (file) {
                    showAlert('info', `Descargando: ${file.name}`);
                }
            } catch (error) {
                console.error('Error descargando archivo:', error);
            }
        }

        function deleteFile(id) {
            try {
                appState.files = appState.files.filter(f => f.id !== id);
                updateFilesDisplay();
                showAlert('success', 'Archivo eliminado');
            } catch (error) {
                console.error('Error eliminando archivo:', error);
            }
        }

        // GESTIÓN DE CORREOS
        function handleEmailSubmit(e) {
            e.preventDefault();
            try {
                const email = {
                    id: Date.now(),
                    to: document.getElementById('emailTo').value,
                    subject: document.getElementById('emailSubject').value,
                    message: document.getElementById('emailMessage').value,
                    from: appState.currentUser ? appState.currentUser.email : 'usuario@sistema.gt',
                    sentDate: new Date().toLocaleDateString(),
                    sentTime: new Date().toLocaleTimeString()
                };

                showAlert('info', 'Enviando correo...');

                // Simulación de envío de correo
                setTimeout(() => {
                    appState.emails.push(email);
                    showAlert('success', `Correo enviado exitosamente a ${email.to}`);
                    document.getElementById('emailForm').reset();
                }, 1000);
            } catch (error) {
                console.error('Error enviando correo:', error);
                showAlert('error', 'Error al enviar correo');
            }
        }

        function loadEmailTemplate(type) {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                const inventoryCount = appState.inventory.length;
                const inventoryValue = appState.inventory.reduce((sum, p) => sum + p.totalValue, 0);

                const templates = {
                    audit: {
                        subject: 'Solicitud de Auditoría - ' + new Date().getFullYear(),
                        message: `Estimado/a,

Espero que este mensaje le encuentre bien. Me dirijo a usted para solicitar una auditoría de inventarios para nuestra empresa.

Detalles de la solicitud:
- Empresa: [Nombre de la empresa]
- Período a auditar: [Período]
- Fecha propuesta: [Fecha]

Agradecemos su pronta respuesta.

Saludos cordiales,
${currentUserName}
Sistema de Auditoría - Guatemala`
                    },
                    report: {
                        subject: 'Reporte de Inventario - ' + new Date().toLocaleDateString(),
                        message: `Adjunto encontrará el reporte de inventario actualizado.

Resumen:
- Total de productos: ${inventoryCount}
- Valor total del inventario: Q. ${inventoryValue.toFixed(2)}

Por favor, revise la información y no dude en contactarnos para cualquier aclaración.

Atentamente,
${currentUserName}`
                    },
                    reminder: {
                        subject: 'Recordatorio - Auditoría Pendiente',
                        message: `Estimado/a,

Este es un recordatorio amigable sobre la auditoría programada.

Detalles:
- Fecha: [Fecha]
- Hora: [Hora]
- Ubicación: [Dirección]

Por favor, confirme su asistencia.

Saludos,
${currentUserName}`
                    }
                };

                const template = templates[type];
                if (template) {
                    document.getElementById('emailSubject').value = template.subject;
                    document.getElementById('emailMessage').value = template.message;
                    showAlert('info', 'Plantilla de correo cargada');
                }
            } catch (error) {
                console.error('Error cargando plantilla:', error);
            }
        }

        // REPORTES Y ESTADÍSTICAS
        function generateReport(type) {
            try {
                const reports = {
                    inventory: () => generateInventoryReport(),
                    vnr: () => generateVNRReport(),
                    valuation: () => generateValuationReport(),
                    users: () => generateUsersReport()
                };

                if (reports[type]) {
                    reports[type]();
                }
            } catch (error) {
                console.error('Error generando reporte:', error);
                showAlert('error', 'Error al generar el reporte');
            }
        }

        function generateInventoryReport() {
            try {
                if (appState.inventory.length === 0) {
                    showAlert('error', 'No hay productos en el inventario para generar el reporte');
                    return;
                }

                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                const totalValue = appState.inventory.reduce((sum, p) => sum + p.totalValue, 0);
                const totalVNR = appState.inventory.reduce((sum, p) => sum + p.vnr, 0);

                let report = `=== REPORTE DE INVENTARIO ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

RESUMEN:
- Total de productos: ${appState.inventory.length}
- Valor total del inventario: Q. ${totalValue.toFixed(2)}
- VNR total: Q. ${totalVNR.toFixed(2)}

DETALLE DE PRODUCTOS:
`;

                appState.inventory.forEach((product, index) => {
                    report += `
${index + 1}. ${product.name} (${product.code})
   - Cantidad: ${product.quantity}
   - Costo unitario: Q. ${product.unitCost.toFixed(2)}
   - Precio de venta: Q. ${product.salePrice.toFixed(2)}
   - Valor total: Q. ${product.totalValue.toFixed(2)}
   - VNR: Q. ${product.vnr.toFixed(2)}
`;
                });

                downloadReport(report, 'reporte_inventario.txt');
            } catch (error) {
                console.error('Error generando reporte de inventario:', error);
            }
        }

        function generateVNRReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== ANÁLISIS DE VALOR NETO DE REALIZACIÓN (VNR) ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

El VNR representa el valor estimado de venta menos los costos estimados de finalización y venta.

ANÁLISIS POR PRODUCTO:
`;

                appState.inventory.forEach((product, index) => {
                    const vnrPerUnit = product.vnr / product.quantity;
                    const margin = ((vnrPerUnit - product.unitCost) / product.unitCost * 100).toFixed(2);
                    
                    report += `
${index + 1}. ${product.name}
   - VNR unitario: Q. ${vnrPerUnit.toFixed(2)}
   - Costo unitario: Q. ${product.unitCost.toFixed(2)}
   - Margen: ${margin}%
   - VNR total: Q. ${product.vnr.toFixed(2)}
`;
                });

                downloadReport(report, 'analisis_vnr.txt');
            } catch (error) {
                console.error('Error generando reporte VNR:', error);
            }
        }

        function generateValuationReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== REPORTE DE VALUACIÓN DE INVENTARIOS ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}
Método: Costo vs VNR (el menor)

CRITERIOS DE VALUACIÓN:
- Se utiliza el menor valor entre costo y VNR
- Cumple con principios contables guatemaltecos

VALUACIÓN POR PRODUCTO:
`;

                let totalValuation = 0;
                appState.inventory.forEach((product, index) => {
                    const costTotal = product.unitCost * product.quantity;
                    const valuation = Math.min(costTotal, product.vnr);
                    totalValuation += valuation;
                    
                    report += `
${index + 1}. ${product.name}
   - Costo total: Q. ${costTotal.toFixed(2)}
   - VNR: Q. ${product.vnr.toFixed(2)}
   - Valuación (menor): Q. ${valuation.toFixed(2)}
`;
                });

                const totalCost = appState.inventory.reduce((sum, p) => sum + p.totalCost, 0);
                report += `

RESUMEN DE VALUACIÓN:
- Valuación total del inventario: Q. ${totalValuation.toFixed(2)}
- Diferencia con costo histórico: Q. ${(totalCost - totalValuation).toFixed(2)}
`;

                downloadReport(report, 'valuacion_inventarios.txt');
            } catch (error) {
                console.error('Error generando reporte de valuación:', error);
            }
        }

        function generateUsersReport() {
            try {
                const currentUserName = appState.currentUser ? appState.currentUser.name : 'Usuario del Sistema';
                
                let report = `=== REPORTE DE USUARIOS ===
Fecha: ${new Date().toLocaleDateString()}
Generado por: ${currentUserName}

RESUMEN:
- Total de usuarios: ${appState.users.length}

DETALLE DE USUARIOS:
`;

                const roleGroups = {};
                appState.users.forEach(user => {
                    if (!roleGroups[user.role]) {
                        roleGroups[user.role] = [];
                    }
                    roleGroups[user.role].push(user);
                });

                Object.keys(roleGroups).forEach(role => {
                    report += `

${getRoleDisplayName(role).toUpperCase()}S (${roleGroups[role].length}):
`;
                    roleGroups[role].forEach((user, index) => {
                        report += `${index + 1}. ${user.name} - ${user.company} (${user.email})
`;
                    });
                });

                downloadReport(report, 'reporte_usuarios.txt');
            } catch (error) {
                console.error('Error generando reporte de usuarios:', error);
            }
        }

        function downloadReport(content, filename) {
            try {
                const blob = new Blob([content], { type: 'text/plain' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                
                showAlert('success', `Reporte generado y descargado: ${filename}`);
            } catch (error) {
                console.error('Error descargando reporte:', error);
                showAlert('error', 'Error al descargar el reporte');
            }
        }

        function updateStatistics() {
            try {
                const stats = {
                    products: appState.inventory.length,
                    users: appState.users.length,
                    files: appState.files.length,
                    emails: appState.emails.length
                };

                const statsProductsEl = document.getElementById('statsProducts');
                const statsUsersEl = document.getElementById('statsUsers');
                const statsFilesEl = document.getElementById('statsFiles');
                const statsEmailsEl = document.getElementById('statsEmails');

                if (statsProductsEl) statsProductsEl.textContent = stats.products;
                if (statsUsersEl) statsUsersEl.textContent = stats.users;
                if (statsFilesEl) statsFilesEl.textContent = stats.files;
                if (statsEmailsEl) statsEmailsEl.textContent = stats.emails;
            } catch (error) {
                console.error('Error actualizando estadísticas:', error);
            }
        }

        // GESTIÓN DE PERFIL
        function handleProfileSubmit(e) {
            e.preventDefault();
            try {
                if (!appState.currentUser) return;

                // Actualizar información del usuario actual
                const updatedProfile = {
                    name: document.getElementById('profileName').value,
                    email: document.getElementById('profileEmail').value,
                    phone: document.getElementById('profilePhone').value,
                    company: document.getElementById('profileCompany').value,
                    position: document.getElementById('profilePosition').value
                };

                // En una aplicación real, esto se enviaría al servidor
                Object.assign(appState.currentUser, updatedProfile);
                
                showAlert('success', 'Perfil actualizado exitosamente');
            } catch (error) {
                console.error('Error actualizando perfil:', error);
                showAlert('error', 'Error al actualizar el perfil');
            }
        }

        // UTILIDADES
        function showAlert(type, message) {
            try {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type}`;
                alertDiv.textContent = message;
                
                // Insertar al inicio del contenido activo
                const activeTab = document.querySelector('.tab-content.active');
                if (activeTab) {
                    activeTab.insertBefore(alertDiv, activeTab.firstChild);
                    
                    // Remover después de 5 segundos
                    setTimeout(() => {
                        if (alertDiv.parentNode) {
                            alertDiv.parentNode.removeChild(alertDiv);
                        }
                    }, 5000);
                }
            } catch (error) {
                console.error('Error mostrando alerta:', error);
            }
        }

        function loadSampleData() {
            try {
                // Datos de ejemplo para demostración
                appState.users = [
                    {
                        id: 1,
                        name: 'María González',
                        email: 'maria.gonzalez@empresa.gt',
                        phone: '+502 2234-5678',
                        company: 'Corporación Guatemala S.A.',
                        position: 'Gerente de Finanzas',
                        role: 'admin',
                        createdDate: '15/08/2025'
                    },
                    {
                        id: 2,
                        name: 'Carlos López',
                        email: 'carlos.lopez@auditores.gt',
                        phone: '+502 5678-9012',
                        company: 'López & Asociados',
                        position: 'Auditor Senior',
                        role: 'auditor',
                        createdDate: '20/08/2025'
                    }
                ];

                appState.inventory = [
                    {
                        id: 1,
                        code: 'PROD001',
                        name: 'Café Premium Guatemala',
                        quantity: 500,
                        unitCost: 25.00,
                        salePrice: 35.00,
                        marketValue: 32.00,
                        vnr: 16000.00,
                        totalCost: 12500.00,
                        totalValue: 17500.00,
                        date: '25/08/2025'
                    },
                    {
                        id: 2,
                        code: 'PROD002',
                        name: 'Textiles Tradicionales',
                        quantity: 200,
                        unitCost: 45.00,
                        salePrice: 75.00,
                        marketValue: 70.00,
                        vnr: 14000.00,
                        totalCost: 9000.00,
                        totalValue: 15000.00,
                        date: '26/08/2025'
                    }
                ];

                // Actualizar displays iniciales
                updateUsersDisplay();
                updateInventoryDisplay();
                
                console.log('Datos de ejemplo cargados correctamente');
            } catch (error) {
                console.error('Error cargando datos de ejemplo:', error);
            }
        }
    </script>
</body>
</html>
